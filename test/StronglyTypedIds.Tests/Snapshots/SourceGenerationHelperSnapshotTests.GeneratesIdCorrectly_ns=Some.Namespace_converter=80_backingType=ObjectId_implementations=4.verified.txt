//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StronglyTypedId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

namespace Some.Namespace
{
    [MongoDB.Bson.Serialization.Attributes.BsonSerializer(typeof(MyTestIdMongoSerializer))]
    readonly partial struct MyTestId : System.IComparable<MyTestId>
    {
        public MongoDB.Bson.ObjectId Value { get; }

        public MyTestId(MongoDB.Bson.ObjectId value)
        {
            Value = value;
        }

        public static MyTestId New() => new MyTestId(MongoDB.Bson.ObjectId.GenerateNewId());
        public static readonly MyTestId Empty = new MyTestId(MongoDB.Bson.ObjectId.Empty);

        public bool Equals(MyTestId other) => this.Value.Equals(other.Value);
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is MyTestId other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => Value.ToString();
        public static bool operator ==(MyTestId a, MyTestId b) => a.Equals(b);
        public static bool operator !=(MyTestId a, MyTestId b) => !(a == b);
                public int CompareTo(MyTestId other) => Value.CompareTo(other.Value);

        public class EfCoreValueConverter : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<MyTestId, string>
        {
            public EfCoreValueConverter() : this(null) { }
            public EfCoreValueConverter(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints = null)
                : base(
                    id => id.Value == MongoDB.Bson.ObjectId.Empty ? null : id.Value.ToString(),
                    value => string.IsNullOrEmpty(value) ? MyTestId.Empty : new MyTestId(new MongoDB.Bson.ObjectId(value)),
                    mappingHints
                ) { }
        }
        class MyTestIdMongoSerializer : MongoDB.Bson.Serialization.Serializers.SerializerBase<MyTestId>
        {
            public override MyTestId Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext context, MongoDB.Bson.Serialization.BsonDeserializationArgs args)
            {
                if (context.Reader.GetCurrentBsonType() == MongoDB.Bson.BsonType.ObjectId)
                {
                    return new MyTestId(context.Reader.ReadObjectId());
                }
                else
                {
                    context.Reader.SkipValue();
                    return MyTestId.Empty;
                }
            }
            
            public override void Serialize(MongoDB.Bson.Serialization.BsonSerializationContext context, MongoDB.Bson.Serialization.BsonSerializationArgs args, MyTestId value)
            {
                if (value.Value == MongoDB.Bson.ObjectId.Empty)
                {
                    context.Writer.WriteNull();
                }
                else
                {
                    context.Writer.WriteObjectId(value.Value);
                }
            }
        }
    }
}
