//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StronglyTypedId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

namespace Some.Namespace
{
    [System.Text.Json.Serialization.JsonConverter(typeof(MyTestIdSystemTextJsonConverter))]
    [Swashbuckle.AspNetCore.Annotations.SwaggerSchemaFilter(typeof(MyTestIdSchemaFilter))]
    readonly partial struct MyTestId 
    {
        public long Value { get; }

        public MyTestId(long value)
        {
            Value = value;
        }

        public static readonly MyTestId Empty = new MyTestId(0);

        public bool Equals(MyTestId other) => this.Value.Equals(other.Value);
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is MyTestId other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => Value.ToString();
        public static bool operator ==(MyTestId a, MyTestId b) => a.Equals(b);
        public static bool operator !=(MyTestId a, MyTestId b) => !(a == b);

        public class DapperTypeHandler : Dapper.SqlMapper.TypeHandler<MyTestId>
        {
            public override void SetValue(System.Data.IDbDataParameter parameter, MyTestId value)
            {
                parameter.Value = value.Value;
            }

            public override MyTestId Parse(object value)
            {
                return value switch
                {
                    long longValue => new MyTestId(longValue),
                    int intValue => new MyTestId(intValue),
                    short shortValue => new MyTestId(shortValue),
                    string stringValue when  !string.IsNullOrEmpty(stringValue) && long.TryParse(stringValue, out var result) => new MyTestId(result),
                    _ => throw new System.InvalidCastException($"Unable to cast object of type {value.GetType()} to MyTestId"),
                };
            }
        }

        class MyTestIdSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<MyTestId>
        {
            public override MyTestId Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
            {
                return new MyTestId(reader.GetInt64());
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, MyTestId value, System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteNumberValue(value.Value);
            }
        }

        class MyTestIdSchemaFilter : Swashbuckle.AspNetCore.SwaggerGen.ISchemaFilter
        {
            public void Apply(Microsoft.OpenApi.Models.OpenApiSchema schema, Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext context)
            {
                var idSchema = new Microsoft.OpenApi.Models.OpenApiSchema {Type = "integer", Format = "int64"};
                schema.Type = idSchema.Type;
                schema.Format = idSchema.Format;
                schema.Example = idSchema.Example;
                schema.Default = idSchema.Default;
                schema.Properties = idSchema.Properties;
            }
        }
    }
}
