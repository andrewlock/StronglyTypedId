//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StronglyTypedId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

namespace Some.Namespace
{
    readonly partial struct MyTestId : System.IEquatable<MyTestId>
    {
        public int Value { get; }

        public MyTestId(int value)
        {
            Value = value;
        }

        public static readonly MyTestId Empty = new MyTestId(0);

        public bool Equals(MyTestId other) => this.Value.Equals(other.Value);
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is MyTestId other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => Value.ToString();
        public static bool operator ==(MyTestId a, MyTestId b) => a.Equals(b);
        public static bool operator !=(MyTestId a, MyTestId b) => !(a == b);

        public class EfCoreValueConverter : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<MyTestId, int>
        {
            public EfCoreValueConverter() : this(null) { }
            public EfCoreValueConverter(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints = null)
                : base(
                    id => id.Value,
                    value => new MyTestId(value),
                    mappingHints
                ) { }
        }
        
        public class EfCoreValueGenerator : Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator<MyTestId>
        {
            private int _id = int.MinValue;
            public override bool GeneratesTemporaryValues => true;

            public override MyTestId Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry entry)
            {
                System.Threading.Interlocked.Increment(ref _id);
                return new MyTestId(_id);
            }
        }

        public class DapperTypeHandler : Dapper.SqlMapper.TypeHandler<MyTestId>
        {
            public override void SetValue(System.Data.IDbDataParameter parameter, MyTestId value)
            {
                parameter.Value = value.Value;
            }

            public override MyTestId Parse(object value)
            {
                return value switch
                {
                    int intValue => new MyTestId(intValue),
                    long longValue when longValue < int.MaxValue => new MyTestId((int)longValue),
                    string stringValue when !string.IsNullOrEmpty(stringValue) && int.TryParse(stringValue, out var result) => new MyTestId(result),
                    _ => throw new System.InvalidCastException($"Unable to cast object of type {value.GetType()} to MyTestId"),
                };
            }
        }
    }
}
