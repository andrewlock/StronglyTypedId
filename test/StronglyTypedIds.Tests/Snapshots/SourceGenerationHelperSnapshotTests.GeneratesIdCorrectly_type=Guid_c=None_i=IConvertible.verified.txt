//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StronglyTypedId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1036:Override methods on comparable types")]
    readonly partial struct MyTestId : System.IConvertible, StronglyTypedIds.IInternalStronglyTypedId<System.Guid>
    {
        public System.Guid Value { get; }

        public MyTestId(System.Guid value)
        {
            Value = value;
        }

        public static MyTestId New() => new MyTestId(System.Guid.NewGuid());
        public static readonly MyTestId Empty = new MyTestId(System.Guid.Empty);

        public bool Equals(MyTestId other) => this.Value.Equals(other.Value);
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is MyTestId other && Equals(other);
        }
        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => Value.ToString();
        public static bool operator ==(MyTestId a, MyTestId b) => a.Equals(b);
        public static bool operator !=(MyTestId a, MyTestId b) => !(a == b);

//ICONVERTIBLE
#nullable enable

        public System.TypeCode GetTypeCode()
        {
            throw new System.NotImplementedException();
        }

        public bool ToBoolean(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public byte ToByte(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public char ToChar(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public System.DateTime ToDateTime(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public decimal ToDecimal(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public double ToDouble(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public short ToInt16(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public int ToInt32(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public long ToInt64(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public sbyte ToSByte(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public float ToSingle(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public string ToString(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public object ToType(System.Type conversionType, System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public ushort ToUInt16(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public uint ToUInt32(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public ulong ToUInt64(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }
#nullable disable

    }
