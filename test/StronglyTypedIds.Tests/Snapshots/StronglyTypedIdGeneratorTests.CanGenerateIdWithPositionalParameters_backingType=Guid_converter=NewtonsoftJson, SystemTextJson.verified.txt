//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StronglyTypedId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

namespace MyTests.TestNameSpace
{
    [Newtonsoft.Json.JsonConverter(typeof(MyIdNewtonsoftJsonConverter))]
    [System.Text.Json.Serialization.JsonConverter(typeof(MyIdSystemTextJsonConverter))]
    readonly partial struct MyId : System.IComparable<MyId>, System.IEquatable<MyId>
    {
        public System.Guid Value { get; }

        public MyId(System.Guid value)
        {
            Value = value;
        }

        public static MyId New() => new MyId(System.Guid.NewGuid());
        public static readonly MyId Empty = new MyId(System.Guid.Empty);

        public bool Equals(MyId other) => this.Value.Equals(other.Value);
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is MyId other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => Value.ToString();
        public static bool operator ==(MyId a, MyId b) => a.Equals(b);
        public static bool operator !=(MyId a, MyId b) => !(a == b);
        public int CompareTo(MyId other) => Value.CompareTo(other.Value);

        class MyIdNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(MyId);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (MyId)value;
                serializer.Serialize(writer, id.Value);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var guid = serializer.Deserialize<System.Guid?>(reader);
                return guid.HasValue ? new MyId(guid.Value) : null;
            }
        }

        class MyIdSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<MyId>
        {
            public override MyId Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
            {
                return new MyId(System.Guid.Parse(reader.GetString()));
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, MyId value, System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStringValue(value.Value);
            }
        }
    }
}
