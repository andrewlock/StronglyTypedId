//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StronglyTypedId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable
    partial struct MyId
    {
        public partial class EfCoreValueConverter : global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<MyId, global::System.Guid>
        {
            public EfCoreValueConverter() : this(null) { }
            public EfCoreValueConverter(global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints? mappingHints = null)
                : base(
                    id => id.Value,
                    value => new MyId(value),
                    mappingHints
                ) { }
        }
    }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StronglyTypedId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable
    partial struct MyId
    {
        public partial class DapperTypeHandler : global::Dapper.SqlMapper.TypeHandler<MyId>
        {
            public override void SetValue(global::System.Data.IDbDataParameter parameter, MyId value)
            {
                parameter.Value = value.Value;
            }

            public override MyId Parse(object value)
            {
                return value switch
                {
                    global::System.Guid guidValue => new MyId(guidValue),
                    string stringValue when !string.IsNullOrEmpty(stringValue) && global::System.Guid.TryParse(stringValue, out var result) => new MyId(result),
                    _ => throw new global::System.InvalidCastException($"Unable to cast object of type {value.GetType()} to MyId"),
                };
            }
        }
    }
