//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StronglyTypedId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

    [Newtonsoft.Json.JsonConverter(typeof(MyTestIdNewtonsoftJsonConverter))]
    [System.Text.Json.Serialization.JsonConverter(typeof(MyTestIdSystemTextJsonConverter))]
    [System.ComponentModel.TypeConverter(typeof(MyTestIdTypeConverter))]
    [Swashbuckle.AspNetCore.Annotations.SwaggerSchemaFilter(typeof(MyTestIdSchemaFilter))]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1036:Override methods on comparable types")]
    readonly partial struct MyTestId : System.IComparable<MyTestId>, System.IComparable, System.IEquatable<MyTestId>, System.IParsable<MyTestId>, System.IConvertible, IStronglyTypedId<long>, StronglyTypedIds.IInternalStronglyTypedId<long>
    {
        public long Value { get; }

        public MyTestId(long value)
        {
            Value = value;
        }

        public static readonly MyTestId Empty = new MyTestId(0);

        public bool Equals(MyTestId other) => this.Value.Equals(other.Value);
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is MyTestId other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => Value.ToString();

        public static bool operator ==(MyTestId a, MyTestId b) => a.Equals(b);
        public static bool operator !=(MyTestId a, MyTestId b) => !(a == b);

        #pragma warning disable CA1036
#nullable enable
                public int CompareTo(MyTestId other) => Value.CompareTo(other.Value);

                public int CompareTo(object? obj)
                {
                        if (ReferenceEquals(obj, null))
                                return 1;

                        if (obj is not MyTestId other)
                                throw new System.ArgumentException("Object is not a MyTestId");

                        return Value.CompareTo(other.Value);
                }
#nullable disable
#pragma warning restore CA1036


#nullable enable
        public static MyTestId Parse(string s, System.IFormatProvider? provider)
        {
            return new MyTestId(long.Parse(s, provider));
        }

        public static bool TryParse(string? s, System.IFormatProvider? provider, out MyTestId result)
        {
            long res = 0;
            var ok = long.TryParse(s, provider, out res);
            result = new MyTestId(res);
            return ok;
        }
#nullable disable


//ICONVERTIBLE
#nullable enable

        public System.TypeCode GetTypeCode()
        {
            throw new System.NotImplementedException();
        }

        public bool ToBoolean(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public byte ToByte(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public char ToChar(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public System.DateTime ToDateTime(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public decimal ToDecimal(System.IFormatProvider? provider)
        {
            return (decimal)Value;
        }

        public double ToDouble(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public short ToInt16(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public int ToInt32(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public long ToInt64(System.IFormatProvider? provider)
        {
            return Value;
        }

        public sbyte ToSByte(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public float ToSingle(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public string ToString(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public object ToType(System.Type conversionType, System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public ushort ToUInt16(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public uint ToUInt32(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public ulong ToUInt64(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }
#nullable disable


    public static IStronglyTypedId<long> Create(long value)
    {
        return new MyTestId(value);
    }


        public class EfCoreValueConverter : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<MyTestId, long>
        {
            public EfCoreValueConverter() : this(null) { }
            public EfCoreValueConverter(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints = null)
                : base(
                    id => id.Value,
                    value => new MyTestId(value),
                    mappingHints
                ) { }
        }

        public class DapperTypeHandler : Dapper.SqlMapper.TypeHandler<MyTestId>
        {
            public override void SetValue(System.Data.IDbDataParameter parameter, MyTestId value)
            {
                parameter.Value = value.Value;
                parameter.DbType = System.Data.DbType.Int64;
            }

            public override MyTestId Parse(object value)
            {
                return value switch
                {
                    long longValue => new MyTestId(longValue),
                    int intValue => new MyTestId(intValue),
                    decimal decimalValue => new MyTestId((long)decimalValue),
                    short shortValue => new MyTestId(shortValue),
                    string stringValue when  !string.IsNullOrEmpty(stringValue) && long.TryParse(stringValue, out var result) => new MyTestId(result),
                    _ => throw new System.InvalidCastException($"Unable to cast object of type {value.GetType()} to MyTestId"),
                };
            }
        }

#pragma warning disable CA2255
        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        public static void AddTypeHandler()
        {
            Dapper.SqlMapper.AddTypeHandler(new DapperTypeHandler());
        }
#pragma warning restore CA2255


#if !FAKE_CODE
        public class AutoMapperTypeConverter : AutoMapper.ITypeConverter<MyTestId, long>
        {
            public long Convert(MyTestId source, long destination, AutoMapper.ResolutionContext context)
            {
                return source.Value;
            }
        }
#endif


#if !FAKE_CODE
public static void UseLinqToDbConverter(LinqToDB.Mapping.MappingSchema mappingSchema)
{
    mappingSchema.SetConvertExpression<MyTestId, LinqToDB.Data.DataParameter>(a => new LinqToDB.Data.DataParameter() { DataType = LinqToDB.DataType.Decimal, Value = a.Value});
    mappingSchema.SetConvertExpression<LinqToDB.Data.DataParameter, long>(p => (long)p.Value);
}

public static MyTestId op_Implicit(decimal value)
{
    return new MyTestId((long)value);
}
#endif


        class MyTestIdTypeConverter : System.ComponentModel.TypeConverter
        {
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
            {
                return sourceType == typeof(long) || sourceType == typeof(int) || sourceType == typeof(short)  || sourceType == typeof(string) || base.CanConvertFrom(context, sourceType);
            }

            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
                return value switch
                {
                    long longValue => new MyTestId(longValue),
                    int intValue => new MyTestId(intValue),
                    short shortValue => new MyTestId(shortValue),
                    string stringValue when  !string.IsNullOrEmpty(stringValue) && long.TryParse(stringValue, out var result) => new MyTestId(result),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
            {
                return sourceType == typeof(long) || sourceType == typeof(string) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType)
            {
                if (value is MyTestId idValue)
                {
                    if (destinationType == typeof(long))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(string))
                    {
                        return idValue.Value.ToString();
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        class MyTestIdNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(MyTestId);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (MyTestId)value;
                serializer.Serialize(writer, id.Value);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var result = serializer.Deserialize<long?>(reader);
                return result.HasValue ? new MyTestId(result.Value) : null;
            }
        }

        class MyTestIdSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<MyTestId>
        {
            public override MyTestId Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
            {
                return new MyTestId(reader.GetInt64());
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, MyTestId value, System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteNumberValue(value.Value);
            }
        }

        class MyTestIdSchemaFilter : Swashbuckle.AspNetCore.SwaggerGen.ISchemaFilter
        {
            public void Apply(Microsoft.OpenApi.Models.OpenApiSchema schema, Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext context)
            {
                var idSchema = new Microsoft.OpenApi.Models.OpenApiSchema {Type = "integer", Format = "int64"};
                schema.Type = idSchema.Type;
                schema.Format = idSchema.Format;
                schema.Example = idSchema.Example;
                schema.Default = idSchema.Default;
                schema.Properties = idSchema.Properties;
            }
        }
    }
