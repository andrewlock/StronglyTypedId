//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StronglyTypedId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

    [Newtonsoft.Json.JsonConverter(typeof(MyTestIdNewtonsoftJsonConverter))]
    [System.Text.Json.Serialization.JsonConverter(typeof(MyTestIdSystemTextJsonConverter))]
    [MongoDB.Bson.Serialization.Attributes.BsonSerializer(typeof(MyTestIdMongoSerializer))]
    readonly partial struct MyTestId : System.IComparable<MyTestId>, System.IEquatable<MyTestId>
    {
        public long Value { get; }

        public MyTestId(long value)
        {
            Value = value;
        }

        public static readonly MyTestId Empty = new MyTestId(0);

        public bool Equals(MyTestId other) => this.Value.Equals(other.Value);
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is MyTestId other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => Value.ToString();
        public static bool operator ==(MyTestId a, MyTestId b) => a.Equals(b);
        public static bool operator !=(MyTestId a, MyTestId b) => !(a == b);
        public int CompareTo(MyTestId other) => Value.CompareTo(other.Value);

        class MyTestIdNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(MyTestId);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (MyTestId)value;
                serializer.Serialize(writer, id.Value);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var result = serializer.Deserialize<long?>(reader);
                return result.HasValue ? new MyTestId(result.Value) : null;
            }
        }

        class MyTestIdSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<MyTestId>
        {
            public override MyTestId Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
            {
                return new MyTestId(reader.GetInt64());
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, MyTestId value, System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteNumberValue(value.Value);
            }
        }
        class MyTestIdMongoSerializer : MongoDB.Bson.Serialization.Serializers.SerializerBase<MyTestId>
        {
            public override MyTestId Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext context, MongoDB.Bson.Serialization.BsonDeserializationArgs args)
            {
                return new MyTestId(context.Reader.ReadInt64());
            }
            
            public override void Serialize(MongoDB.Bson.Serialization.BsonSerializationContext context, MongoDB.Bson.Serialization.BsonSerializationArgs args, MyTestId value)
            {
                context.Writer.WriteInt64(value.Value);
            }
        }
    }
