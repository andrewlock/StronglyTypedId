//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StronglyTypedId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

    [Newtonsoft.Json.JsonConverter(typeof(MyTestIdNewtonsoftJsonConverter))]
    [System.Text.Json.Serialization.JsonConverter(typeof(MyTestIdSystemTextJsonConverter))]
    [System.ComponentModel.TypeConverter(typeof(MyTestIdTypeConverter))]
    [Swashbuckle.AspNetCore.Annotations.SwaggerSchemaFilter(typeof(MyTestIdSchemaFilter))]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1036:Override methods on comparable types")]
    readonly partial struct MyTestId : System.IComparable<MyTestId>, System.IEquatable<MyTestId>, System.IParsable<MyTestId>, System.IConvertible, IStronglyTypedId<MassTransit.NewId>
    {
        public MassTransit.NewId Value { get; }

        public MyTestId(MassTransit.NewId value)
        {
            Value = value;
        }

        public static MyTestId New() => new MyTestId(MassTransit.NewId.Next());
        public static readonly MyTestId Empty = new MyTestId(MassTransit.NewId.Empty);

        public bool Equals(MyTestId other) => this.Value.Equals(other.Value);
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is MyTestId other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => Value.ToString();

        public static bool operator ==(MyTestId a, MyTestId b) => a.Equals(b);
        public static bool operator !=(MyTestId a, MyTestId b) => !(a == b);
        #pragma warning disable CA1036
            public int CompareTo(MyTestId other) => Value.CompareTo(other.Value);
        #pragma warning restore CA1036


        public static MyTestId Parse(string s, IFormatProvider? provider)
        {
            return new MyTestId(Guid.Parse(s, provider));
        }

        public static bool TryParse(string? s, IFormatProvider? provider, out MyTestId result)
        {
            long res = 0;
            var ok = Guid.TryParse(s, provider, out res);
            result = new MyTestId(res);
            return ok;
        }


//ICONVERTIBLE
#nullable enable

        public System.TypeCode GetTypeCode()
        {
            throw new System.NotImplementedException();
        }

        public bool ToBoolean(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public byte ToByte(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public char ToChar(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public System.DateTime ToDateTime(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public decimal ToDecimal(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public double ToDouble(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public short ToInt16(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public int ToInt32(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public long ToInt64(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public sbyte ToSByte(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public float ToSingle(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public string ToString(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public object ToType(System.Type conversionType, System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public ushort ToUInt16(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public uint ToUInt32(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }

        public ulong ToUInt64(System.IFormatProvider? provider)
        {
            throw new System.NotImplementedException();
        }
#nullable disable


    public static IStronglyTypedId<MassTransit.NewId> Create(MassTransit.NewId value)
    {
        return new MyTestId(value);
    }


        public class EfCoreValueConverter : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<MyTestId, System.Guid>
        {
            public EfCoreValueConverter() : this(null) { }
            public EfCoreValueConverter(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints = null)
                : base(
                    id => id.Value.ToGuid(),
                    value => new MyTestId(MassTransit.NewId.FromGuid(value)),
                    mappingHints
                ) { }
        }

        public class DapperTypeHandler : Dapper.SqlMapper.TypeHandler<MyTestId>
        {
            public override void SetValue(System.Data.IDbDataParameter parameter, MyTestId value)
            {
                parameter.Value = value.Value.ToGuid();
            }

            public override MyTestId Parse(object value)
            {
                return value switch
                {
                    System.Guid guidValue => new MyTestId(MassTransit.NewId.FromGuid(guidValue)),
                    string stringValue when !string.IsNullOrEmpty(stringValue) && System.Guid.TryParse(stringValue, out var result) => new MyTestId(MassTransit.NewId.FromGuid(result)),
                    _ => throw new System.InvalidCastException($"Unable to cast object of type {value.GetType()} to MyTestId"),
                };
            }
        }


#pragma warning disable CA2255
        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        public static void AddTypeHandler()
        {
            Dapper.SqlMapper.AddTypeHandler(new DapperTypeHandler());
        }
#pragma warning restore CA2255


#if !FAKE_CODE
        public class AutoMapperTypeConverter : AutoMapper.ITypeConverter<MyTestId, string?>
        {
            public string Convert(MyTestId source, string destination, AutoMapper.ResolutionContext context)
            {
                return source.Value;
            }
        }
#endif


        class MyTestIdTypeConverter : System.ComponentModel.TypeConverter
        {
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
            {
                return sourceType == typeof(System.Guid) || sourceType == typeof(MassTransit.NewId) || 
                       sourceType == typeof(string) || base.CanConvertFrom
                (context, sourceType);
            }

            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
                return value switch
                {
                    MassTransit.NewId newIdValue => new MyTestId(newIdValue),
                    System.Guid guidValue => new MyTestId(MassTransit.NewId.FromGuid(guidValue)),
                    string stringValue when !string.IsNullOrEmpty(stringValue) && System.Guid.TryParse(stringValue, out var result) => new MyTestId(MassTransit.NewId.FromGuid(result)),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
            {
                return sourceType == typeof(System.Guid) || sourceType == typeof(MassTransit.NewId) || sourceType == typeof(string) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType)
            {
                if (value is MyTestId idValue)
                {
                    if (destinationType == typeof(MassTransit.NewId))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(System.Guid)) 
                    {
                        return idValue.Value.ToGuid();
                    }

                    if (destinationType == typeof(string))
                    {
                        return idValue.Value.ToGuid().ToString();
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        class MyTestIdNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(MyTestId);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (MyTestId)value;
                serializer.Serialize(writer, id.Value.ToGuid());
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var guid = serializer.Deserialize<System.Guid?>(reader);
                return guid.HasValue ? new MyTestId(MassTransit.NewId.FromGuid(guid.Value)) : null;
            }
        }

        class MyTestIdSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<MyTestId>
        {
            public override MyTestId Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
            {
                return new MyTestId(MassTransit.NewId.FromGuid(reader.GetGuid()));
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, MyTestId value, System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStringValue(value.Value.ToGuid());
            }
        }

        class MyTestIdSchemaFilter : Swashbuckle.AspNetCore.SwaggerGen.ISchemaFilter
        {
            public void Apply(Microsoft.OpenApi.Models.OpenApiSchema schema, Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext context)
            {
                var idSchema = new Microsoft.OpenApi.Models.OpenApiSchema {Type = "string", Format = "uuid"};
                schema.Type = idSchema.Type;
                schema.Format = idSchema.Format;
                schema.Example = idSchema.Example;
                schema.Default = idSchema.Default;
                schema.Properties = idSchema.Properties;
            }
        }
    }
