//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StronglyTypedId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1036:Override methods on comparable types")]
    readonly partial struct MyTestId : System.IComparable<MyTestId>, System.IComparable
    {
        public System.Guid Value { get; }

        public MyTestId(System.Guid value)
        {
            Value = value;
        }

        public static MyTestId New() => new MyTestId(System.Guid.NewGuid());
        public static readonly MyTestId Empty = new MyTestId(System.Guid.Empty);

        public bool Equals(MyTestId other) => this.Value.Equals(other.Value);
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is MyTestId other && Equals(other);
        }
        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => Value.ToString();
        public static bool operator ==(MyTestId a, MyTestId b) => a.Equals(b);
        public static bool operator !=(MyTestId a, MyTestId b) => !(a == b);

    #pragma warning disable CA1036
#nullable enable
        public int CompareTo(MyTestId other) => Value.CompareTo(other.Value);

        public int CompareTo(object? obj)
        {
            if (ReferenceEquals(obj, null))
                return 1;

            if (obj is not MyTestId other)
                throw new System.ArgumentException("Object is not a MyTestId");

            return Value.CompareTo(other.Value);
        }
#nullable disable
    #pragma warning restore CA1036

    }
