//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StronglyTypedId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

    [Newtonsoft.Json.JsonConverter(typeof(MyTestIdNewtonsoftJsonConverter))]
    [MongoDB.Bson.Serialization.Attributes.BsonSerializer(typeof(MyTestIdMongoSerializer))]
    readonly partial struct MyTestId 
    {
        public MongoDB.Bson.ObjectId Value { get; }

        public MyTestId(MongoDB.Bson.ObjectId value)
        {
            Value = value;
        }

        public static MyTestId New() => new MyTestId(MongoDB.Bson.ObjectId.GenerateNewId());
        public static readonly MyTestId Empty = new MyTestId(MongoDB.Bson.ObjectId.Empty);

        public bool Equals(MyTestId other) => this.Value.Equals(other.Value);
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is MyTestId other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => Value.ToString();
        public static bool operator ==(MyTestId a, MyTestId b) => a.Equals(b);
        public static bool operator !=(MyTestId a, MyTestId b) => !(a == b);

        public class DapperTypeHandler : Dapper.SqlMapper.TypeHandler<MyTestId>
        {
            public override void SetValue(System.Data.IDbDataParameter parameter, MyTestId value)
            {
                parameter.Value = value.Value == MongoDB.Bson.ObjectId.Empty ? null : value.Value.ToString();
            }

            public override MyTestId Parse(object value)
            {
                return value switch
                {
                    string stringValue when !string.IsNullOrEmpty(stringValue) => new MyTestId(new MongoDB.Bson.ObjectId(stringValue)),
                    string stringValue when string.IsNullOrEmpty(stringValue) => MyTestId.Empty,
                    _ => throw new System.InvalidCastException($"Unable to cast object of type {value.GetType()} to MyTestId"),
                };
            }
        }

        class MyTestIdNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(MyTestId);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                if (value is MyTestId id && id.Value != MongoDB.Bson.ObjectId.Empty)
                {
                    serializer.Serialize(writer, id.Value.ToString());
                }
                else
                {
                    serializer.Serialize(writer, null);
                }
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var result = serializer.Deserialize<string>(reader);
                return string.IsNullOrEmpty(result) ? MyTestId.Empty : new MyTestId(new MongoDB.Bson.ObjectId(result));
            }
        }
        class MyTestIdMongoSerializer : MongoDB.Bson.Serialization.Serializers.SerializerBase<MyTestId>
        {
            public override MyTestId Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext context, MongoDB.Bson.Serialization.BsonDeserializationArgs args)
            {
                if (context.Reader.GetCurrentBsonType() == MongoDB.Bson.BsonType.ObjectId)
                {
                    return new MyTestId(context.Reader.ReadObjectId());
                }
                else
                {
                    context.Reader.SkipValue();
                    return MyTestId.Empty;
                }
            }
            
            public override void Serialize(MongoDB.Bson.Serialization.BsonSerializationContext context, MongoDB.Bson.Serialization.BsonSerializationArgs args, MyTestId value)
            {
                if (value.Value == MongoDB.Bson.ObjectId.Empty)
                {
                    context.Writer.WriteNull();
                }
                else
                {
                    context.Writer.WriteObjectId(value.Value);
                }
            }
        }
    }
