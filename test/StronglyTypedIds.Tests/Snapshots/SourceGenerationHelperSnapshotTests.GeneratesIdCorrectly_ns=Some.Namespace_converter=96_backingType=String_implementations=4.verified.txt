//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StronglyTypedId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

namespace Some.Namespace
{
    [Swashbuckle.AspNetCore.Annotations.SwaggerSchemaFilter(typeof(MyTestIdSchemaFilter))]
    readonly partial struct MyTestId : System.IComparable<MyTestId>
    {
        public string Value { get; }

        public MyTestId(string value)
        {
            Value = value ?? throw new System.ArgumentNullException(nameof(value));
        }

        public static readonly MyTestId Empty = new MyTestId(string.Empty);

        public bool Equals(MyTestId other)
        {
            return (Value, other.Value) switch
            {
                (null, null) => true,
                (null, _) => false,
                (_, null) => false,
                (_, _) => Value.Equals(other.Value),
            };
        }
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is MyTestId other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => Value;
        public static bool operator ==(MyTestId a, MyTestId b) => a.Equals(b);
        public static bool operator !=(MyTestId a, MyTestId b) => !(a == b);
        public int CompareTo(MyTestId other)
        {
            return (Value, other.Value) switch
            {
                (null, null) => 0,
                (null, _) => -1,
                (_, null) => 1,
                (_, _) => Value.CompareTo(other.Value),
            };
        }

        public class DapperTypeHandler : Dapper.SqlMapper.TypeHandler<MyTestId>
        {
            public override void SetValue(System.Data.IDbDataParameter parameter, MyTestId value)
            {
                parameter.Value = value.Value;
            }

            public override MyTestId Parse(object value)
            {
                return value switch
                {
                    string stringValue => new MyTestId(stringValue),
                    _ => throw new System.InvalidCastException($"Unable to cast object of type {value.GetType()} to MyTestId"),
                };
            }
        }

        class MyTestIdSchemaFilter : Swashbuckle.AspNetCore.SwaggerGen.ISchemaFilter
        {
            public void Apply(Microsoft.OpenApi.Models.OpenApiSchema schema, Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext context)
            {
                var idSchema = new Microsoft.OpenApi.Models.OpenApiSchema {Type = "string", Format = ""};
                schema.Type = idSchema.Type;
                schema.Format = idSchema.Format;
                schema.Example = idSchema.Example;
                schema.Default = idSchema.Default;
                schema.Properties = idSchema.Properties;
                schema.Nullable = false;
            }
        }
    }
}
