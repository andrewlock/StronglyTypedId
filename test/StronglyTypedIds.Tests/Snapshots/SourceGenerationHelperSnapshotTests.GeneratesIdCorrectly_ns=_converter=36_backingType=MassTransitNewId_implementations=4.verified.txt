//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the StronglyTypedId source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

    [Newtonsoft.Json.JsonConverter(typeof(MyTestIdNewtonsoftJsonConverter))]
    readonly partial struct MyTestId : System.IComparable<MyTestId>
    {
        public MassTransit.NewId Value { get; }

        public MyTestId(MassTransit.NewId value)
        {
            Value = value;
        }

        public static MyTestId New() => new MyTestId(MassTransit.NewId.Next());
        public static readonly MyTestId Empty = new MyTestId(MassTransit.NewId.Empty);

        public bool Equals(MyTestId other) => this.Value.Equals(other.Value);
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is MyTestId other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => Value.ToString();
        public static bool operator ==(MyTestId a, MyTestId b) => a.Equals(b);
        public static bool operator !=(MyTestId a, MyTestId b) => !(a == b);
        public int CompareTo(MyTestId other) => Value.CompareTo(other.Value);

        public class DapperTypeHandler : Dapper.SqlMapper.TypeHandler<MyTestId>
        {
            public override void SetValue(System.Data.IDbDataParameter parameter, MyTestId value)
            {
                parameter.Value = value.Value.ToGuid();
            }

            public override MyTestId Parse(object value)
            {
                return value switch
                {
                    System.Guid guidValue => new MyTestId(MassTransit.NewId.FromGuid(guidValue)),
                    string stringValue when !string.IsNullOrEmpty(stringValue) && System.Guid.TryParse(stringValue, out var result) => new MyTestId(MassTransit.NewId.FromGuid(result)),
                    _ => throw new System.InvalidCastException($"Unable to cast object of type {value.GetType()} to MyTestId"),
                };
            }
        }

        class MyTestIdNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(MyTestId);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (MyTestId)value;
                serializer.Serialize(writer, id.Value.ToGuid());
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var guid = serializer.Deserialize<System.Guid?>(reader);
                return guid.HasValue ? new MyTestId(MassTransit.NewId.FromGuid(guid.Value)) : null;
            }
        }
    }
