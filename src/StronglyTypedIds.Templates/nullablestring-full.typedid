    [global::System.ComponentModel.TypeConverter(typeof(PLACEHOLDERIDTypeConverter))]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(PLACEHOLDERIDSystemTextJsonConverter))]
    [global::Newtonsoft.Json.JsonConverter(typeof(PLACEHOLDERIDNewtonsoftJsonConverter))]
    partial struct PLACEHOLDERID :
#if NET6_0_OR_GREATER
        global::System.ISpanFormattable,
#endif
#if NET7_0_OR_GREATER
        global::System.IParsable<PLACEHOLDERID>, global::System.ISpanParsable<PLACEHOLDERID>,
#endif
        global::System.IComparable<PLACEHOLDERID>, global::System.IEquatable<PLACEHOLDERID>, global::System.IFormattable
    {
        public string? Value { get; }

        public PLACEHOLDERID(string? value)
        {
            Value = value;
        }

        public static readonly PLACEHOLDERID Empty = new PLACEHOLDERID(string.Empty);

        /// <inheritdoc cref="global::System.IEquatable{T}"/>
        public bool Equals(PLACEHOLDERID other)
            => (Value, other.Value) switch
            {
                (null, null) => true,
                (null, _) => false,
                (_, null) => false,
                (_, _) => Value.Equals(other.Value, global::System.StringComparison.Ordinal),
            };

        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is PLACEHOLDERID other && Equals(other);
        }

        public override int GetHashCode() => Value?.GetHashCode() ?? 0;

        public override string? ToString() => Value;

        public static bool operator ==(PLACEHOLDERID a, PLACEHOLDERID b) => a.Equals(b);
        public static bool operator !=(PLACEHOLDERID a, PLACEHOLDERID b) => !(a == b);
        public static bool operator >  (PLACEHOLDERID a, PLACEHOLDERID b) => a.CompareTo(b) > 0;
        public static bool operator <  (PLACEHOLDERID a, PLACEHOLDERID b) => a.CompareTo(b) < 0;
        public static bool operator >=  (PLACEHOLDERID a, PLACEHOLDERID b) => a.CompareTo(b) >= 0;
        public static bool operator <=  (PLACEHOLDERID a, PLACEHOLDERID b) => a.CompareTo(b) <= 0;

        /// <inheritdoc cref="global::System.IComparable{TSelf}"/>
        public int CompareTo(PLACEHOLDERID other)
            => (Value, other.Value) switch
            {
                (null, null) => 0,
                (null, _) => -1,
                (_, null) => 1,
                (_, _) => string.CompareOrdinal(Value, other.Value),
            };

        public partial class PLACEHOLDERIDTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override bool CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext? context, global::System.Type sourceType)
            {
                return sourceType == typeof(string) || base.CanConvertFrom(context, sourceType);
            }
        
            public override object? ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext? context, global::System.Globalization.CultureInfo? culture, object value)
                => value switch
                {
                    null => new PLACEHOLDERID(null),
                    string x => new PLACEHOLDERID(x),
                    _ => base.ConvertFrom(context, culture, value),
                };

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext? context, global::System.Type? sourceType)
            {
                return sourceType == typeof(string) || base.CanConvertTo(context, sourceType);
            }

            public override object? ConvertTo(global::System.ComponentModel.ITypeDescriptorContext? context, global::System.Globalization.CultureInfo? culture, object? value, global::System.Type destinationType)
            {
                if (value is PLACEHOLDERID idValue)
                {
                    if (destinationType == typeof(string))
                    {
                        return idValue.Value;
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        public partial class PLACEHOLDERIDSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<PLACEHOLDERID>
        {
            public override PLACEHOLDERID Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
                => new (reader.GetString());

            public override void Write(global::System.Text.Json.Utf8JsonWriter writer, PLACEHOLDERID value, global::System.Text.Json.JsonSerializerOptions options)
            {
                if (value.Value is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    writer.WriteStringValue(value.Value);
                }
            }

#if NET6_0_OR_GREATER
            public override PLACEHOLDERID ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
                => new(reader.GetString());

            public override void WriteAsPropertyName(global::System.Text.Json.Utf8JsonWriter writer, PLACEHOLDERID value, global::System.Text.Json.JsonSerializerOptions options)
                => writer.WritePropertyName(value.Value ?? string.Empty);
#endif
        }

        public static PLACEHOLDERID Parse(string input)
            => new(input);

#if NET7_0_OR_GREATER
        /// <inheritdoc cref="global::System.IParsable{TSelf}"/>
        public static PLACEHOLDERID Parse(string input, global::System.IFormatProvider? provider)
            => new(input);

        /// <inheritdoc cref="global::System.IParsable{TSelf}"/>
        public static bool TryParse(
            string? input,
            global::System.IFormatProvider? provider,
            out PLACEHOLDERID result)
        {
            result = new(input);
            return true;
        }
#endif

        /// <inheritdoc cref="global::System.IFormattable"/>
        public string ToString(string? format, global::System.IFormatProvider? formatProvider)
            => Value ?? string.Empty;

#if NETCOREAPP2_1_OR_GREATER
        public static PLACEHOLDERID Parse(global::System.ReadOnlySpan<char> input)
            => new(input.ToString());
#endif

#if NET6_0_OR_GREATER
#if NET7_0_OR_GREATER
        /// <inheritdoc cref="global::System.ISpanParsable{TSelf}"/>
#endif
        public static PLACEHOLDERID Parse(global::System.ReadOnlySpan<char> input, global::System.IFormatProvider? provider)
            => new(input.ToString());
        
#if NET7_0_OR_GREATER
        /// <inheritdoc cref="global::System.ISpanParsable{TSelf}"/>
#endif
        public static bool TryParse(global::System.ReadOnlySpan<char> input, global::System.IFormatProvider? provider, out PLACEHOLDERID result)
        {
            result = new(input.ToString());
            return true;
        }

        /// <inheritdoc cref="global::System.ISpanFormattable"/>
        public bool TryFormat(
            global::System.Span<char> destination,
            out int charsWritten,
            global::System.ReadOnlySpan<char> format,
            global::System.IFormatProvider? provider)
            => TryFormat(destination, out charsWritten, format);

        /// <inheritdoc cref="global::System.ISpanFormattable"/>
        public bool TryFormat(
            global::System.Span<char> destination,
            out int charsWritten,
            global::System.ReadOnlySpan<char> format = default)
        {
            if (Value is not null && destination.Length > Value.Length)
            {
                global::System.MemoryExtensions.AsSpan(Value).CopyTo(destination);
                charsWritten = Value.Length;
                return true;
            }
        
            charsWritten = default;
            return false;
        }
#endif
        
        public partial class DapperTypeHandler : global::Dapper.SqlMapper.TypeHandler<PLACEHOLDERID>
        {
            public override void SetValue(global::System.Data.IDbDataParameter parameter, PLACEHOLDERID value)
            {
                parameter.Value = value.Value;
            }

            public override PLACEHOLDERID Parse(object value)
            {
                return value switch
                {
                    null => new PLACEHOLDERID(null),
                    System.DBNull => new PLACEHOLDERID(null),
                    string stringValue => new PLACEHOLDERID(stringValue),
                    _ => throw new global::System.InvalidCastException($"Unable to cast object of type {value.GetType()} to PLACEHOLDERID"),
                };
            }
        }

        public partial class EfCoreValueConverter : global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<PLACEHOLDERID, string?>
        {
            public EfCoreValueConverter() : this(null) { }
            public EfCoreValueConverter(global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints? mappingHints = null)
                : base(
                    id => id.Value,
                    value => new PLACEHOLDERID(value),
                    mappingHints
                ) { }
        }

        public partial class PLACEHOLDERIDNewtonsoftJsonConverter : global::Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(global::System.Type objectType)
            {
                return objectType == typeof(PLACEHOLDERID);
            }

            public override void WriteJson(global::Newtonsoft.Json.JsonWriter writer, object? value, global::Newtonsoft.Json.JsonSerializer serializer)
            {
                serializer.Serialize(writer, value is PLACEHOLDERID id ? id.Value : null);
            }

            public override object? ReadJson(global::Newtonsoft.Json.JsonReader reader, global::System.Type objectType, object? existingValue, global::Newtonsoft.Json.JsonSerializer serializer)
            {
                if (objectType == typeof(PLACEHOLDERID?))
                {
                    var value = serializer.Deserialize<string?>(reader);

                    return new PLACEHOLDERID(value);
                }

                return new PLACEHOLDERID(serializer.Deserialize<string>(reader));
            }
        }
    }