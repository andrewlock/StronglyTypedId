using System;
using System.IO;
using System.Reflection;
using System.Text;

namespace StronglyTypedIds;

internal static partial class EmbeddedSources
{
    private static readonly Assembly ThisAssembly = typeof(EmbeddedSources).Assembly;
    internal static readonly string StronglyTypedIdAttributeSource = LoadAttributeTemplateForEmitting("StronglyTypedIdAttribute");
    internal static readonly string StronglyTypedIdDefaultsAttributeSource = LoadAttributeTemplateForEmitting("StronglyTypedIdDefaultsAttribute");
    internal static readonly string TemplateSource = LoadAttributeTemplateForEmitting("Template");

    internal static readonly string AutoGeneratedHeader = LoadEmbeddedResource("StronglyTypedIds.Templates.AutoGeneratedHeader.cs");

    internal static string GetTemplate(Template template)
        => template switch
        {
            Template.Guid => GuidTemplate,
            Template.Int => IntTemplate,
            Template.Long => LongTemplate,
            Template.String => StringTemplate,
            _ => string.Empty,
        };

    internal static string LoadEmbeddedTypedId(string templateName)
        => LoadEmbeddedResource($"StronglyTypedIds.Templates.{templateName}");

    internal static string LoadEmbeddedResource(string resourceName)
    {
        var resourceStream = ThisAssembly.GetManifestResourceStream(resourceName);
        if (resourceStream is null)
        {
            var existingResources = ThisAssembly.GetManifestResourceNames();
            throw new ArgumentException($"Could not find embedded resource {resourceName}. Available names: {string.Join(", ", existingResources)}");
        }

        using var reader = new StreamReader(resourceStream, Encoding.UTF8);

        return reader.ReadToEnd();
    }

    internal static string LoadAttributeTemplateForEmitting(string resourceName)
    {
        var resource = LoadEmbeddedResource($"StronglyTypedIds.Templates.Sources.{resourceName}.cs");
        // AutoGeneratedHeader is included directly in the file
        // so that it's there if you're directly referencing the attributes package too
        return resource
                   .Replace("#nullable enable", """
                                                #nullable enable

                                                #if STRONGLY_TYPED_ID_EMBED_ATTRIBUTES
                                                """)
                   .Replace("public sealed", "internal sealed")
                   .Replace("public enum", "internal enum")
               + """

                 #endif
                 """;
    }
}