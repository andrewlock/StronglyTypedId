using System;
using System.Text;

namespace StronglyTypedIds
{
    internal static class SourceGenerationHelper
    {
        public static string CreateId(
            string idNamespace,
            string idName,
            ParentClass? parentClass,
            string template)
            => CreateId(idNamespace, idName, parentClass, template, null);

        public static string CreateId(
            string idNamespace,
            string idName,
            ParentClass? parentClass,
            string template,
            StringBuilder? sb)
        {
            if (string.IsNullOrEmpty(idName))
            {
                throw new ArgumentException("Value cannot be null or empty.", nameof(idName));
            }

            var hasNamespace = !string.IsNullOrEmpty(idNamespace);

            var parentsCount = 0;

            sb ??= new StringBuilder();
            sb.Append(EmbeddedSources.AutoGeneratedHeader);

            if (hasNamespace)
            {
                sb
                    .Append("namespace ")
                    .Append(idNamespace)
                    .AppendLine(@"
{");
            }

            while (parentClass is { } parent)
            {
                sb
                    .Append("    partial ")
                    .Append(parent.Keyword)
                    .Append(' ')
                    .Append(parent.Name)
                    .Append(' ')
                    .Append(parent.Constraints)
                    .AppendLine(@"
    {");
                parentsCount++;
                parentClass = parent.Child;
            }
            
            // TODO: can't add this if it's a generic class
            sb.AppendLine("    [global::System.ComponentModel.TypeConverter(typeof(PLACEHOLDERIDTypeConverter))]");

            sb.AppendLine(template);

            sb.Replace("PLACEHOLDERID", idName);

            for (int i = 0; i < parentsCount; i++)
            {
                sb.AppendLine(@"    }");
            }

            if (hasNamespace)
            {
                sb.Append('}').AppendLine();
            }

            return sb.ToString();
        }

        internal static string CreateSourceName(string nameSpace, ParentClass? parent, string name)
        {
            var sb = new StringBuilder(nameSpace).Append('.');
            while (parent is { } p)
            {
                var s = p.Name
                    .Replace(" ", "")
                    .Replace(",", "")
                    .Replace("<", "__")
                    .Replace(">", "");
                sb.Append(s).Append('.');
                parent = p.Child;
            }
            return sb.Append(name).Append(".g.cs").ToString();
        }
    }
}
