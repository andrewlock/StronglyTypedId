using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace StronglyTypedId.Generator
{
    public class StringSyntaxTreeGenerator : BaseSyntaxTreeGenerator
    {
        protected override IEnumerable<MemberDeclarationSyntax> GetMembers(string idName)
        {
            yield return PropertyDeclaration(
                        PredefinedType
                        (
                            Token(SyntaxKind.StringKeyword)),
                        Identifier("Value"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            Token(SyntaxKind.PublicKeyword)))
                    .WithAccessorList
                    (
                        AccessorList
                        (
                            SingletonList<AccessorDeclarationSyntax>
                            (
                                AccessorDeclaration
                                (
                                    SyntaxKind.GetAccessorDeclaration)
                                .WithSemicolonToken
                                (
                                    Token(SyntaxKind.SemicolonToken)))));
            yield return ConstructorDeclaration
            (
                        Identifier(idName))
                    .WithModifiers
                    (
                        TokenList
                        (
                            Token(SyntaxKind.PublicKeyword)))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SingletonSeparatedList<ParameterSyntax>
                            (
                                Parameter
                                (
                                    Identifier("value"))
                                .WithType
                                (
                                    PredefinedType
                                    (
                                        Token(SyntaxKind.StringKeyword))))))
                    .WithBody
                    (
                        Block
                        (
                            SingletonList<StatementSyntax>
                            (
                                ExpressionStatement
                                (
                                    AssignmentExpression
                                    (
                                        SyntaxKind.SimpleAssignmentExpression,
                                        IdentifierName("Value"),
                                        IdentifierName("value"))))));
            yield return FieldDeclaration
            (
                        VariableDeclaration
                        (
                            IdentifierName(idName))
                        .WithVariables
                        (
                            SingletonSeparatedList<VariableDeclaratorSyntax>
                            (
                                VariableDeclarator
                                (
                                    Identifier("Empty"))
                                .WithInitializer
                                (
                                    EqualsValueClause
                                    (
                                        ObjectCreationExpression
                                        (
                                            IdentifierName(idName))
                                        .WithArgumentList
                                        (
                                            ArgumentList
                                            (
                                                SingletonSeparatedList<ArgumentSyntax>
                                                (
                                                    Argument
                                                    (
                                                        MemberAccessExpression
                                                        (
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            PredefinedType
                                                            (
                                                                Token(SyntaxKind.StringKeyword)),
                                                            IdentifierName("Empty")))))))))))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new[]
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.StaticKeyword),
                                Token(SyntaxKind.ReadOnlyKeyword)}));
            yield return MethodDeclaration
            (
                PredefinedType
                (
                    Token(SyntaxKind.BoolKeyword)),
                Identifier("Equals"))
            .WithModifiers
            (
                TokenList
                (
                    Token(SyntaxKind.PublicKeyword)))
            .WithParameterList
            (
                ParameterList
                (
                    SingletonSeparatedList<ParameterSyntax>
                    (
                        Parameter
                        (
                            Identifier("other"))
                        .WithType
                        (
                            IdentifierName(idName)))))
            .WithExpressionBody
            (
                ArrowExpressionClause
                (
                    InvocationExpression
                    (
                        MemberAccessExpression
                        (
                            SyntaxKind.SimpleMemberAccessExpression,
                            MemberAccessExpression
                            (
                                SyntaxKind.SimpleMemberAccessExpression,
                                ThisExpression(),
                                IdentifierName("Value")),
                            IdentifierName("Equals")))
                    .WithArgumentList
                    (
                        ArgumentList
                        (
                            SingletonSeparatedList<ArgumentSyntax>
                            (
                                Argument
                                (
                                    MemberAccessExpression
                                    (
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        IdentifierName("other"),
                                        IdentifierName("Value"))))))))
            .WithSemicolonToken
            (
                Token(SyntaxKind.SemicolonToken));
            yield return MethodDeclaration
                    (
                        PredefinedType
                        (
                            Token(SyntaxKind.IntKeyword)),
                        Identifier("CompareTo"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            Token(SyntaxKind.PublicKeyword)))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SingletonSeparatedList<ParameterSyntax>
                            (
                                Parameter
                                (
                                    Identifier("other"))
                                .WithType
                                (
                                    IdentifierName(idName)))))
                    .WithExpressionBody
                    (
                        ArrowExpressionClause
                        (
                            InvocationExpression
                            (
                                MemberAccessExpression
                                (
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("Value"),
                                    IdentifierName("CompareTo")))
                            .WithArgumentList
                            (
                                ArgumentList
                                (
                                    SingletonSeparatedList<ArgumentSyntax>
                                    (
                                        Argument
                                        (
                                            MemberAccessExpression
                                            (
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                IdentifierName("other"),
                                                IdentifierName("Value"))))))))
                    .WithSemicolonToken
                    (
                        Token(SyntaxKind.SemicolonToken));
            yield return MethodDeclaration
            (
                PredefinedType
                (
                    Token(SyntaxKind.BoolKeyword)),
                Identifier("Equals"))
            .WithModifiers
            (
                TokenList
                (
                    new[]
                    {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
            .WithParameterList
            (
                ParameterList
                (
                    SingletonSeparatedList<ParameterSyntax>
                    (
                        Parameter
                        (
                            Identifier("obj"))
                        .WithType
                        (
                            PredefinedType
                            (
                                Token(SyntaxKind.ObjectKeyword))))))
            .WithBody
            (
                Block
                (
                    IfStatement
                    (
                        InvocationExpression
                        (
                            IdentifierName("ReferenceEquals"))
                        .WithArgumentList
                        (
                            ArgumentList
                            (
                                SeparatedList<ArgumentSyntax>
                                (
                                    new SyntaxNodeOrToken[]
                                    {
                                                Argument
                                                (
                                                    LiteralExpression
                                                    (
                                                        SyntaxKind.NullLiteralExpression)),
                                                Token(SyntaxKind.CommaToken),
                                                Argument
                                                (
                                                    IdentifierName("obj"))}))),
                        ReturnStatement
                        (
                            LiteralExpression
                            (
                                SyntaxKind.FalseLiteralExpression))),
                    ReturnStatement
                    (
                        BinaryExpression
                        (
                            SyntaxKind.LogicalAndExpression,
                            IsPatternExpression
                            (
                                IdentifierName("obj"),
                                DeclarationPattern
                                (
                                    IdentifierName(idName),
                                    SingleVariableDesignation
                                    (
                                        Identifier("other")))),
                            InvocationExpression
                            (
                                IdentifierName("Equals"))
                            .WithArgumentList
                            (
                                ArgumentList
                                (
                                    SingletonSeparatedList<ArgumentSyntax>
                                    (
                                        Argument
                                        (
                                            IdentifierName("other")))))))));
            yield return MethodDeclaration
            (
                        PredefinedType
                        (
                            Token(SyntaxKind.IntKeyword)),
                        Identifier("GetHashCode"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new[]
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
                    .WithExpressionBody
                    (
                        ArrowExpressionClause
                        (
                            InvocationExpression
                            (
                                MemberAccessExpression
                                (
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("Value"),
                                    IdentifierName("GetHashCode")))))
                    .WithSemicolonToken
                    (
                        Token(SyntaxKind.SemicolonToken));
            yield return MethodDeclaration
            (
                        PredefinedType
                        (
                            Token(SyntaxKind.StringKeyword)),
                        Identifier("ToString"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new[]
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
                    .WithExpressionBody
                    (
                        ArrowExpressionClause
                        (
                            InvocationExpression
                            (
                                MemberAccessExpression
                                (
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("Value"),
                                    IdentifierName("ToString")))))
                    .WithSemicolonToken
                    (
                        Token(SyntaxKind.SemicolonToken));
            yield return OperatorDeclaration
            (
                        PredefinedType
                        (
                            Token(SyntaxKind.BoolKeyword)),
                        Token(SyntaxKind.EqualsEqualsToken))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new[]
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.StaticKeyword)}))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SeparatedList<ParameterSyntax>
                            (
                                new SyntaxNodeOrToken[]
                                {
                                    Parameter
                                    (
                                        Identifier("a"))
                                    .WithType
                                    (
                                        IdentifierName(idName)),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("b"))
                                    .WithType
                                    (
                                        IdentifierName(idName))})))
                    .WithExpressionBody
                    (
                        ArrowExpressionClause
                        (
                            BinaryExpression
                            (
                                SyntaxKind.EqualsExpression,
                                InvocationExpression
                                (
                                    MemberAccessExpression
                                    (
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        IdentifierName("a"),
                                        IdentifierName("CompareTo")))
                                .WithArgumentList
                                (
                                    ArgumentList
                                    (
                                        SingletonSeparatedList<ArgumentSyntax>
                                        (
                                            Argument
                                            (
                                                IdentifierName("b"))))),
                                LiteralExpression
                                (
                                    SyntaxKind.NumericLiteralExpression,
                                    Literal(0)))))
                    .WithSemicolonToken
                    (
                        Token(SyntaxKind.SemicolonToken));
            yield return OperatorDeclaration
            (
                        PredefinedType
                        (
                            Token(SyntaxKind.BoolKeyword)),
                        Token(SyntaxKind.ExclamationEqualsToken))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new[]
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.StaticKeyword)}))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SeparatedList<ParameterSyntax>
                            (
                                new SyntaxNodeOrToken[]
                                {
                                    Parameter
                                    (
                                        Identifier("a"))
                                    .WithType
                                    (
                                        IdentifierName(idName)),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("b"))
                                    .WithType
                                    (
                                        IdentifierName(idName))})))
                    .WithExpressionBody
                    (
                        ArrowExpressionClause
                        (
                            PrefixUnaryExpression
                            (
                                SyntaxKind.LogicalNotExpression,
                                ParenthesizedExpression
                                (
                                    BinaryExpression
                                    (
                                        SyntaxKind.EqualsExpression,
                                        IdentifierName("a"),
                                        IdentifierName("b"))))))
                    .WithSemicolonToken
                    (
                        Token(SyntaxKind.SemicolonToken));
        }

        protected override ClassDeclarationSyntax GetNewtonsoftJsonConverter(string jsonConverterName, string idName)
        {
            return ClassDeclaration(jsonConverterName)
        .WithBaseList
        (
            BaseList
            (
                SingletonSeparatedList<BaseTypeSyntax>
                (
                    SimpleBaseType
                    (
                        QualifiedName
                        (
                            QualifiedName
                            (
                                IdentifierName("Newtonsoft"),
                                IdentifierName("Json")),
                            IdentifierName("JsonConverter"))))))
        .WithMembers
        (
            List<MemberDeclarationSyntax>
            (
                new MemberDeclarationSyntax[]
                {
                    MethodDeclaration
                    (
                        PredefinedType
                        (
                            Token(SyntaxKind.BoolKeyword)),
                        Identifier("CanConvert"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new []
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SingletonSeparatedList<ParameterSyntax>
                            (
                                Parameter
                                (
                                    Identifier("objectType"))
                                .WithType
                                (
                                    QualifiedName
                                    (
                                        IdentifierName("System"),
                                        IdentifierName("Type"))))))
                    .WithBody
                    (
                        Block
                        (
                            SingletonList<StatementSyntax>
                            (
                                ReturnStatement
                                (
                                    BinaryExpression
                                    (
                                        SyntaxKind.EqualsExpression,
                                        IdentifierName("objectType"),
                                        TypeOfExpression
                                        (
                                            IdentifierName(idName))))))),
                    MethodDeclaration
                    (
                        PredefinedType
                        (
                            Token(SyntaxKind.VoidKeyword)),
                        Identifier("WriteJson"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new []
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SeparatedList<ParameterSyntax>
                            (
                                new SyntaxNodeOrToken[]
                                {
                                    Parameter
                                    (
                                        Identifier("writer"))
                                    .WithType
                                    (
                                        QualifiedName
                                        (
                                            QualifiedName
                                            (
                                                IdentifierName("Newtonsoft"),
                                                IdentifierName("Json")),
                                            IdentifierName("JsonWriter"))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("value"))
                                    .WithType
                                    (
                                        PredefinedType
                                        (
                                            Token(SyntaxKind.ObjectKeyword))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("serializer"))
                                    .WithType
                                    (
                                        QualifiedName
                                        (
                                            QualifiedName
                                            (
                                                IdentifierName("Newtonsoft"),
                                                IdentifierName("Json")),
                                            IdentifierName("JsonSerializer")))})))
                    .WithBody
                    (
                        Block
                        (
                            LocalDeclarationStatement
                            (
                                VariableDeclaration
                                (
                                    IdentifierName("var"))
                                .WithVariables
                                (
                                    SingletonSeparatedList<VariableDeclaratorSyntax>
                                    (
                                        VariableDeclarator
                                        (
                                            Identifier("id"))
                                        .WithInitializer
                                        (
                                            EqualsValueClause
                                            (
                                                CastExpression
                                                (
                                                    IdentifierName(idName),
                                                    IdentifierName("value"))))))),
                            ExpressionStatement
                            (
                                InvocationExpression
                                (
                                    MemberAccessExpression
                                    (
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        IdentifierName("serializer"),
                                        IdentifierName("Serialize")))
                                .WithArgumentList
                                (
                                    ArgumentList
                                    (
                                        SeparatedList<ArgumentSyntax>
                                        (
                                            new SyntaxNodeOrToken[]
                                            {
                                                Argument
                                                (
                                                    IdentifierName("writer")),
                                                Token(SyntaxKind.CommaToken),
                                                Argument
                                                (
                                                    MemberAccessExpression
                                                    (
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        IdentifierName("id"),
                                                        IdentifierName("Value")))})))))),
                    MethodDeclaration
                    (
                        PredefinedType
                        (
                            Token(SyntaxKind.ObjectKeyword)),
                        Identifier("ReadJson"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new []
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SeparatedList<ParameterSyntax>
                            (
                                new SyntaxNodeOrToken[]
                                {
                                    Parameter
                                    (
                                        Identifier("reader"))
                                    .WithType
                                    (
                                        QualifiedName
                                        (
                                            QualifiedName
                                            (
                                                IdentifierName("Newtonsoft"),
                                                IdentifierName("Json")),
                                            IdentifierName("JsonReader"))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("objectType"))
                                    .WithType
                                    (
                                        QualifiedName
                                        (
                                            IdentifierName("System"),
                                            IdentifierName("Type"))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("existingValue"))
                                    .WithType
                                    (
                                        PredefinedType
                                        (
                                            Token(SyntaxKind.ObjectKeyword))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("serializer"))
                                    .WithType
                                    (
                                        QualifiedName
                                        (
                                            QualifiedName
                                            (
                                                IdentifierName("Newtonsoft"),
                                                IdentifierName("Json")),
                                            IdentifierName("JsonSerializer")))})))
                    .WithBody
                    (
                        Block
                        (
                            SingletonList<StatementSyntax>
                            (
                                ReturnStatement
                                (
                                    ObjectCreationExpression
                                    (
                                        IdentifierName(idName))
                                    .WithArgumentList
                                    (
                                        ArgumentList
                                        (
                                            SingletonSeparatedList<ArgumentSyntax>
                                            (
                                                Argument
                                                (
                                                    InvocationExpression
                                                    (
                                                        MemberAccessExpression
                                                        (
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            IdentifierName("serializer"),
                                                            GenericName
                                                            (
                                                                Identifier("Deserialize"))
                                                            .WithTypeArgumentList
                                                            (
                                                                TypeArgumentList
                                                                (
                                                                    SingletonSeparatedList<TypeSyntax>
                                                                    (
                                                                        PredefinedType
                                                                        (
                                                                            Token(SyntaxKind.StringKeyword)))))))
                                                    .WithArgumentList
                                                    (
                                                        ArgumentList
                                                        (
                                                            SingletonSeparatedList<ArgumentSyntax>
                                                            (
                                                                Argument
                                                                (
                                                                    IdentifierName("reader")))))))))))))}));
        }

        protected override ClassDeclarationSyntax GetSystemTextJsonConverter(string jsonConverterName, string idName)
        {
            return ClassDeclaration(jsonConverterName)
                .WithModifiers(
                    TokenList(
                        Token(SyntaxKind.PublicKeyword)))
                .WithBaseList(
                    BaseList(
                        SingletonSeparatedList<BaseTypeSyntax>(
                            SimpleBaseType(
                                QualifiedName(
                                    QualifiedName(
                                        QualifiedName(
                                            QualifiedName(
                                                IdentifierName("System"),
                                                IdentifierName("Text")),
                                            IdentifierName("Json")),
                                        IdentifierName("Serialization")),
                                    GenericName(
                                        Identifier("JsonConverter"))
                                    .WithTypeArgumentList(
                                        TypeArgumentList(
                                            SingletonSeparatedList<TypeSyntax>(
                                                IdentifierName(idName)))))))))
                .WithMembers(
                    List<MemberDeclarationSyntax>(
                        new MemberDeclarationSyntax[]{
                            MethodDeclaration(
                                IdentifierName(idName),
                                Identifier("Read"))
                            .WithModifiers(
                                TokenList(
                                    new []{
                                        Token(SyntaxKind.PublicKeyword),
                                        Token(SyntaxKind.OverrideKeyword)}))
                            .WithParameterList(
                                ParameterList(
                                    SeparatedList<ParameterSyntax>(
                                        new SyntaxNodeOrToken[]{
                                            Parameter(
                                                Identifier("reader"))
                                            .WithModifiers(
                                                TokenList(
                                                    Token(SyntaxKind.RefKeyword)))
                                            .WithType(
                                                QualifiedName(
                                                    QualifiedName(
                                                        QualifiedName(
                                                            IdentifierName("System"),
                                                            IdentifierName("Text")),
                                                        IdentifierName("Json")),
                                                    IdentifierName("Utf8JsonReader"))),
                                            Token(SyntaxKind.CommaToken),
                                            Parameter(
                                                Identifier("typeToConvert"))
                                            .WithType(
                                                QualifiedName(
                                                    IdentifierName("System"),
                                                    IdentifierName("Type"))),
                                            Token(SyntaxKind.CommaToken),
                                            Parameter(
                                                Identifier("options"))
                                            .WithType(
                                                QualifiedName(
                                                    QualifiedName(
                                                        QualifiedName(
                                                            IdentifierName("System"),
                                                            IdentifierName("Text")),
                                                        IdentifierName("Json")),
                                                    IdentifierName("JsonSerializerOptions")))})))
                            .WithBody(
                                Block(
                                    SingletonList<StatementSyntax>(
                                        ReturnStatement(
                                            ObjectCreationExpression(
                                                IdentifierName(idName))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                        Argument(
                                                            InvocationExpression(
                                                                MemberAccessExpression(
                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                    IdentifierName("reader"),
                                                                    IdentifierName("GetString"))))))))))),
                            MethodDeclaration(
                                PredefinedType(
                                    Token(SyntaxKind.VoidKeyword)),
                                Identifier("Write"))
                            .WithModifiers(
                                TokenList(
                                    new []{
                                        Token(SyntaxKind.PublicKeyword),
                                        Token(SyntaxKind.OverrideKeyword)}))
                            .WithParameterList(
                                ParameterList(
                                    SeparatedList<ParameterSyntax>(
                                        new SyntaxNodeOrToken[]{
                                            Parameter(
                                                Identifier("writer"))
                                            .WithType(
                                                QualifiedName(
                                                    QualifiedName(
                                                        QualifiedName(
                                                            IdentifierName("System"),
                                                            IdentifierName("Text")),
                                                        IdentifierName("Json")),
                                                    IdentifierName("Utf8JsonWriter"))),
                                            Token(SyntaxKind.CommaToken),
                                            Parameter(
                                                Identifier("value"))
                                            .WithType(
                                                IdentifierName(idName)),
                                            Token(SyntaxKind.CommaToken),
                                            Parameter(
                                                Identifier("options"))
                                            .WithType(
                                                QualifiedName(
                                                    QualifiedName(
                                                        QualifiedName(
                                                            IdentifierName("System"),
                                                            IdentifierName("Text")),
                                                        IdentifierName("Json")),
                                                    IdentifierName("JsonSerializerOptions")))})))
                            .WithBody(
                                Block(
                                    SingletonList<StatementSyntax>(
                                        ExpressionStatement(
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    IdentifierName("writer"),
                                                    IdentifierName("WriteStringValue")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                        Argument(
                                                            MemberAccessExpression(
                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                IdentifierName("value"),
                                                                IdentifierName("Value"))))))))))}));
        }

        protected override ClassDeclarationSyntax GetTypeConverter(string typeConverterName, string idName)
        {
            return ClassDeclaration(typeConverterName)
        .WithBaseList(
            BaseList(
                SingletonSeparatedList<BaseTypeSyntax>(
                    SimpleBaseType(
                        QualifiedName(
                            QualifiedName(
                                IdentifierName("System"),
                                IdentifierName("ComponentModel")),
                            IdentifierName("TypeConverter"))))))
        .WithMembers(
            List<MemberDeclarationSyntax>(
                new MemberDeclarationSyntax[]{
                    MethodDeclaration(
                        PredefinedType(
                            Token(SyntaxKind.BoolKeyword)),
                        Identifier("CanConvertFrom"))
                    .WithModifiers(
                        TokenList(
                            new []{
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
                    .WithParameterList(
                        ParameterList(
                            SeparatedList<ParameterSyntax>(
                                new SyntaxNodeOrToken[]{
                                    Parameter(
                                        Identifier("context"))
                                    .WithType(
                                        QualifiedName(
                                            QualifiedName(
                                                IdentifierName("System"),
                                                IdentifierName("ComponentModel")),
                                            IdentifierName("ITypeDescriptorContext"))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter(
                                        Identifier("sourceType"))
                                    .WithType(
                                        QualifiedName(
                                            IdentifierName("System"),
                                            IdentifierName("Type")))})))
                    .WithBody(
                        Block(
                            SingletonList<StatementSyntax>(
                                ReturnStatement(
                                    BinaryExpression(
                                        SyntaxKind.LogicalOrExpression,
                                        BinaryExpression(
                                            SyntaxKind.EqualsExpression,
                                            IdentifierName("sourceType"),
                                            TypeOfExpression(
                                                PredefinedType(
                                                    Token(SyntaxKind.StringKeyword)))),
                                        InvocationExpression(
                                            MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                BaseExpression(),
                                                IdentifierName("CanConvertFrom")))
                                        .WithArgumentList(
                                            ArgumentList(
                                                SeparatedList<ArgumentSyntax>(
                                                    new SyntaxNodeOrToken[]{
                                                        Argument(
                                                            IdentifierName("context")),
                                                        Token(SyntaxKind.CommaToken),
                                                        Argument(
                                                            IdentifierName("sourceType"))})))))))),
                    MethodDeclaration(
                        PredefinedType(
                            Token(SyntaxKind.ObjectKeyword)),
                        Identifier("ConvertFrom"))
                    .WithModifiers(
                        TokenList(
                            new []{
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
                    .WithParameterList(
                        ParameterList(
                            SeparatedList<ParameterSyntax>(
                                new SyntaxNodeOrToken[]{
                                    Parameter(
                                        Identifier("context"))
                                    .WithType(
                                        QualifiedName(
                                            QualifiedName(
                                                IdentifierName("System"),
                                                IdentifierName("ComponentModel")),
                                            IdentifierName("ITypeDescriptorContext"))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter(
                                        Identifier("culture"))
                                    .WithType(
                                        QualifiedName(
                                            QualifiedName(
                                                IdentifierName("System"),
                                                IdentifierName("Globalization")),
                                            IdentifierName("CultureInfo"))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter(
                                        Identifier("value"))
                                    .WithType(
                                        PredefinedType(
                                            Token(SyntaxKind.ObjectKeyword)))})))
                    .WithBody(
                        Block(
                            LocalDeclarationStatement(
                                VariableDeclaration(
                                    IdentifierName("var"))
                                .WithVariables(
                                    SingletonSeparatedList<VariableDeclaratorSyntax>(
                                        VariableDeclarator(
                                            Identifier("stringValue"))
                                        .WithInitializer(
                                            EqualsValueClause(
                                                BinaryExpression(
                                                    SyntaxKind.AsExpression,
                                                    IdentifierName("value"),
                                                    PredefinedType(
                                                        Token(SyntaxKind.StringKeyword)))))))),
                            IfStatement(
                                PrefixUnaryExpression(
                                    SyntaxKind.LogicalNotExpression,
                                    InvocationExpression(
                                        MemberAccessExpression(
                                            SyntaxKind.SimpleMemberAccessExpression,
                                            PredefinedType(
                                                Token(SyntaxKind.StringKeyword)),
                                            IdentifierName("IsNullOrEmpty")))
                                    .WithArgumentList(
                                        ArgumentList(
                                            SingletonSeparatedList<ArgumentSyntax>(
                                                Argument(
                                                    IdentifierName("stringValue")))))),
                                Block(
                                    SingletonList<StatementSyntax>(
                                        ReturnStatement(
                                            ObjectCreationExpression(
                                                IdentifierName(idName))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                        Argument(
                                                            IdentifierName("stringValue"))))))))),
                            ReturnStatement(
                                InvocationExpression(
                                    MemberAccessExpression(
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        BaseExpression(),
                                        IdentifierName("ConvertFrom")))
                                .WithArgumentList(
                                    ArgumentList(
                                        SeparatedList<ArgumentSyntax>(
                                            new SyntaxNodeOrToken[]{
                                                Argument(
                                                    IdentifierName("context")),
                                                Token(SyntaxKind.CommaToken),
                                                Argument(
                                                    IdentifierName("culture")),
                                                Token(SyntaxKind.CommaToken),
                                                Argument(
                                                    IdentifierName("value"))}))))))}));
        }
    }
}